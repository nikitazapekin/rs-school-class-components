{
  "version": 3,
  "sources": ["../../../app/routes/_index.tsx", "../../../src/store/action-creators/setUsersActionCreator.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\_index.tsx\");\n  import.meta.hot.lastModified = \"1723236086362.1438\";\n}\n// REMIX HMR END\n\nimport React, { useEffect } from 'react';\nimport axios from 'axios';\nimport { useLoaderData } from \"@remix-run/react\";\nimport { useAppDispatch } from '../../src/hooks/redux';\nimport { setUsersActionCreator } from \"../../src/store/action-creators/setUsersActionCreator\";\nimport App from \"../../src/components/App/index\";\nimport Background from '../../src/components/Background';\nexport async function loader({\n  request\n}) {\n  const url = new URL(request.url);\n  const search = new URLSearchParams(url.search);\n  const query = search.get(\"query\") || \"type:user\";\n  const page = parseInt(search.get(\"page\") || \"1\", 10);\n  const limit = parseInt(search.get(\"limit\") || \"10\", 10);\n  try {\n    const apiUrl = `https://api.github.com/search/users?q=${query}&page=${page}&per_page=${limit}`;\n    const response = await axios.get(apiUrl);\n    const users = response.data.items;\n    console.log(users);\n    return {\n      users,\n      query,\n      page,\n      limit\n    };\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      console.error('Error fetching data:', error.message);\n    } else {\n      console.error('Unknown error:', error);\n    }\n    return {\n      users: [],\n      query: \"\",\n      page: 1,\n      limit: 10\n    };\n  }\n}\nexport default function Index() {\n  _s();\n  const {\n    users\n  } = useLoaderData();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (users.length > 0) {\n      dispatch(setUsersActionCreator(users));\n    }\n  }, [users, dispatch]);\n  return <>\r\n      <App />\r\n      <Background />\r\n      </>;\n}\n_s(Index, \"X8DfobF5+rXyHSto2n0pHmbPNHQ=\", false, function () {\n  return [useLoaderData, useAppDispatch];\n});\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "import { setUsers } from '../slices/appSlice';\r\nimport { AppDispatch } from '../store';\r\nimport { UserDataArray } from '../types';\r\nexport const setUsersActionCreator = (data: UserDataArray) => (dispatch: AppDispatch) => {\r\n\tdispatch(setUsers(data));\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,mBAAiC;;;AClB1B,IAAM,wBAAwB,CAAC,SAAwB,CAAC,aAA0B;AACxF,WAAS,SAAS,IAAI,CAAC;AACxB;;;ADmES;AAvET,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,kCAAoC,EAAE;AAAA,EAC/E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAyB;AACzB,cAAY,IAAI,eAAe;AACjC;AA2Ce,SAAR,QAAyB;AAC9B,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,QAAM,WAAW,eAAe;AAChC,8BAAU,MAAM;AACd,QAAI,MAAM,SAAS,GAAG;AACpB,eAAS,sBAAsB,KAAK,CAAC;AAAA,IACvC;AAAA,EACF,GAAG,CAAC,OAAO,QAAQ,CAAC;AACpB,SAAO,sFACH;AAAA,uDAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,WAAK;AAAA,IACL,mDAAC,wBAAD;AAAA;AAAA;AAAA;AAAA,WAAY;AAAA,OAFT;AAAA;AAAA;AAAA;AAAA,SAGH;AACN;AACA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,eAAe,cAAc;AACvC,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
