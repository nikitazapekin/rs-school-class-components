"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@reduxjs";
exports.ids = ["vendor-chunks/@reduxjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReducerType: () => (/* binding */ ReducerType),\n/* harmony export */   SHOULD_AUTOBATCH: () => (/* binding */ SHOULD_AUTOBATCH),\n/* harmony export */   TaskAbortError: () => (/* binding */ TaskAbortError),\n/* harmony export */   Tuple: () => (/* binding */ Tuple),\n/* harmony export */   __DO_NOT_USE__ActionTypes: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.__DO_NOT_USE__ActionTypes),\n/* harmony export */   addListener: () => (/* binding */ addListener),\n/* harmony export */   applyMiddleware: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware),\n/* harmony export */   asyncThunkCreator: () => (/* binding */ asyncThunkCreator),\n/* harmony export */   autoBatchEnhancer: () => (/* binding */ autoBatchEnhancer),\n/* harmony export */   bindActionCreators: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.bindActionCreators),\n/* harmony export */   buildCreateSlice: () => (/* binding */ buildCreateSlice),\n/* harmony export */   clearAllListeners: () => (/* binding */ clearAllListeners),\n/* harmony export */   combineReducers: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers),\n/* harmony export */   combineSlices: () => (/* binding */ combineSlices),\n/* harmony export */   compose: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.compose),\n/* harmony export */   configureStore: () => (/* binding */ configureStore),\n/* harmony export */   createAction: () => (/* binding */ createAction),\n/* harmony export */   createActionCreatorInvariantMiddleware: () => (/* binding */ createActionCreatorInvariantMiddleware),\n/* harmony export */   createAsyncThunk: () => (/* binding */ createAsyncThunk),\n/* harmony export */   createDraftSafeSelector: () => (/* binding */ createDraftSafeSelector),\n/* harmony export */   createDraftSafeSelectorCreator: () => (/* binding */ createDraftSafeSelectorCreator),\n/* harmony export */   createDynamicMiddleware: () => (/* binding */ createDynamicMiddleware),\n/* harmony export */   createEntityAdapter: () => (/* binding */ createEntityAdapter),\n/* harmony export */   createImmutableStateInvariantMiddleware: () => (/* binding */ createImmutableStateInvariantMiddleware),\n/* harmony export */   createListenerMiddleware: () => (/* binding */ createListenerMiddleware),\n/* harmony export */   createNextState: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.produce),\n/* harmony export */   createReducer: () => (/* binding */ createReducer),\n/* harmony export */   createSelector: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelector),\n/* harmony export */   createSelectorCreator: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelectorCreator),\n/* harmony export */   createSerializableStateInvariantMiddleware: () => (/* binding */ createSerializableStateInvariantMiddleware),\n/* harmony export */   createSlice: () => (/* binding */ createSlice),\n/* harmony export */   createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.createStore),\n/* harmony export */   current: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.current),\n/* harmony export */   findNonSerializableValue: () => (/* binding */ findNonSerializableValue),\n/* harmony export */   formatProdErrorMessage: () => (/* binding */ formatProdErrorMessage),\n/* harmony export */   freeze: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.freeze),\n/* harmony export */   isAction: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.isAction),\n/* harmony export */   isActionCreator: () => (/* binding */ isActionCreator),\n/* harmony export */   isAllOf: () => (/* binding */ isAllOf),\n/* harmony export */   isAnyOf: () => (/* binding */ isAnyOf),\n/* harmony export */   isAsyncThunkAction: () => (/* binding */ isAsyncThunkAction),\n/* harmony export */   isDraft: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.isDraft),\n/* harmony export */   isFluxStandardAction: () => (/* binding */ isFSA),\n/* harmony export */   isFulfilled: () => (/* binding */ isFulfilled),\n/* harmony export */   isImmutableDefault: () => (/* binding */ isImmutableDefault),\n/* harmony export */   isPending: () => (/* binding */ isPending),\n/* harmony export */   isPlain: () => (/* binding */ isPlain),\n/* harmony export */   isPlainObject: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject),\n/* harmony export */   isRejected: () => (/* binding */ isRejected),\n/* harmony export */   isRejectedWithValue: () => (/* binding */ isRejectedWithValue),\n/* harmony export */   legacy_createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.legacy_createStore),\n/* harmony export */   lruMemoize: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.lruMemoize),\n/* harmony export */   miniSerializeError: () => (/* binding */ miniSerializeError),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   original: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.original),\n/* harmony export */   prepareAutoBatched: () => (/* binding */ prepareAutoBatched),\n/* harmony export */   removeListener: () => (/* binding */ removeListener),\n/* harmony export */   unwrapResult: () => (/* binding */ unwrapResult),\n/* harmony export */   weakMapMemoize: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.weakMapMemoize)\n/* harmony export */ });\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ \"(ssr)/./node_modules/redux/dist/redux.mjs\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.mjs\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/dist/reselect.mjs\");\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux-thunk */ \"(ssr)/./node_modules/redux-thunk/dist/redux-thunk.mjs\");\nvar _excluded = [\"reducerPath\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n// src/index.ts\n\n\n\n\n// src/createDraftSafeSelector.ts\n\n\nvar createDraftSafeSelectorCreator = function createDraftSafeSelectorCreator() {\n  var createSelector2 = reselect__WEBPACK_IMPORTED_MODULE_1__.createSelectorCreator.apply(void 0, arguments);\n  var createDraftSafeSelector2 = Object.assign(function () {\n    var selector = createSelector2.apply(void 0, arguments);\n    var wrappedSelector = function wrappedSelector(value) {\n      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        rest[_key - 1] = arguments[_key];\n      }\n      return selector.apply(void 0, [(0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(value) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.current)(value) : value].concat(rest));\n    };\n    Object.assign(wrappedSelector, selector);\n    return wrappedSelector;\n  }, {\n    withTypes: function withTypes() {\n      return createDraftSafeSelector2;\n    }\n  });\n  return createDraftSafeSelector2;\n};\nvar createDraftSafeSelector = createDraftSafeSelectorCreator(reselect__WEBPACK_IMPORTED_MODULE_1__.weakMapMemoize);\n\n// src/configureStore.ts\n\n\n// src/devtoolsExtension.ts\n\nvar composeWithDevTools =  false ? 0 : function () {\n  if (arguments.length === 0) return void 0;\n  if (_typeof(arguments[0]) === \"object\") return redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n  return redux__WEBPACK_IMPORTED_MODULE_0__.compose.apply(null, arguments);\n};\nvar devToolsEnhancer =  false ? 0 : function () {\n  return function (noop3) {\n    return noop3;\n  };\n};\n\n// src/getDefaultMiddleware.ts\n\n\n// src/createAction.ts\n\n\n// src/tsHelpers.ts\nvar hasMatchFunction = function hasMatchFunction(v) {\n  return v && typeof v.match === \"function\";\n};\n\n// src/createAction.ts\nfunction createAction(type, prepareAction) {\n  function actionCreator() {\n    if (prepareAction) {\n      var prepared = prepareAction.apply(void 0, arguments);\n      if (!prepared) {\n        throw new Error( false ? 0 : \"prepareAction did not return an object\");\n      }\n      return _objectSpread(_objectSpread({\n        type: type,\n        payload: prepared.payload\n      }, \"meta\" in prepared && {\n        meta: prepared.meta\n      }), \"error\" in prepared && {\n        error: prepared.error\n      });\n    }\n    return {\n      type: type,\n      payload: arguments.length <= 0 ? undefined : arguments[0]\n    };\n  }\n  actionCreator.toString = function () {\n    return \"\".concat(type);\n  };\n  actionCreator.type = type;\n  actionCreator.match = function (action) {\n    return (0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action) && action.type === type;\n  };\n  return actionCreator;\n}\nfunction isActionCreator(action) {\n  return typeof action === \"function\" && \"type\" in action &&\n  // hasMatchFunction only wants Matchers but I don't see the point in rewriting it\n  hasMatchFunction(action);\n}\nfunction isFSA(action) {\n  return (0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action) && Object.keys(action).every(isValidKey);\n}\nfunction isValidKey(key) {\n  return [\"type\", \"payload\", \"error\", \"meta\"].indexOf(key) > -1;\n}\n\n// src/actionCreatorInvariantMiddleware.ts\nfunction getMessage(type) {\n  var splitType = type ? \"\".concat(type).split(\"/\") : [];\n  var actionName = splitType[splitType.length - 1] || \"actionCreator\";\n  return \"Detected an action creator with type \\\"\".concat(type || \"unknown\", \"\\\" being dispatched. \\nMake sure you're calling the action creator before dispatching, i.e. `dispatch(\").concat(actionName, \"())` instead of `dispatch(\").concat(actionName, \")`. This is necessary even if the action has no payload.\");\n}\nfunction createActionCreatorInvariantMiddleware() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (false) {}\n  var _options$isActionCrea = options.isActionCreator,\n    isActionCreator2 = _options$isActionCrea === void 0 ? isActionCreator : _options$isActionCrea;\n  return function () {\n    return function (next) {\n      return function (action) {\n        if (isActionCreator2(action)) {\n          console.warn(getMessage(action.type));\n        }\n        return next(action);\n      };\n    };\n  };\n}\n\n// src/utils.ts\n\nfunction getTimeMeasureUtils(maxDelay, fnName) {\n  var elapsed = 0;\n  return {\n    measureTime: function measureTime(fn) {\n      var started = Date.now();\n      try {\n        return fn();\n      } finally {\n        var finished = Date.now();\n        elapsed += finished - started;\n      }\n    },\n    warnIfExceeded: function warnIfExceeded() {\n      if (elapsed > maxDelay) {\n        console.warn(\"\".concat(fnName, \" took \").concat(elapsed, \"ms, which is more than the warning threshold of \").concat(maxDelay, \"ms. \\nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\\nIt is disabled in production builds, so you don't need to worry about that.\"));\n      }\n    }\n  };\n}\nfunction find(iterable, comparator) {\n  var _iterator = _createForOfIteratorHelper(iterable),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var entry = _step.value;\n      if (comparator(entry)) {\n        return entry;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return void 0;\n}\nvar Tuple = /*#__PURE__*/function (_Array, _Symbol$species) {\n  function _Tuple() {\n    var _this2;\n    _classCallCheck(this, _Tuple);\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n    _this2 = _callSuper(this, _Tuple, [].concat(items));\n    Object.setPrototypeOf(_this2, _Tuple.prototype);\n    return _this2;\n  }\n  _inherits(_Tuple, _Array);\n  return _createClass(_Tuple, [{\n    key: \"concat\",\n    value: function concat() {\n      for (var _len3 = arguments.length, arr = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        arr[_key3] = arguments[_key3];\n      }\n      return _get(_getPrototypeOf(_Tuple.prototype), \"concat\", this).apply(this, arr);\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend() {\n      for (var _len4 = arguments.length, arr = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        arr[_key4] = arguments[_key4];\n      }\n      if (arr.length === 1 && Array.isArray(arr[0])) {\n        return _construct(_Tuple, _toConsumableArray(arr[0].concat(this)));\n      }\n      return _construct(_Tuple, _toConsumableArray(arr.concat(this)));\n    }\n  }], [{\n    key: _Symbol$species,\n    get: function get() {\n      return _Tuple;\n    }\n  }]);\n}( /*#__PURE__*/_wrapNativeSuper(Array), Symbol.species);\nfunction freezeDraftable(val) {\n  return (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(val) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(val, function () {}) : val;\n}\nfunction emplace(map, key, handler) {\n  if (map.has(key)) {\n    var value = map.get(key);\n    if (handler.update) {\n      value = handler.update(value, key, map);\n      map.set(key, value);\n    }\n    return value;\n  }\n  if (!handler.insert) throw new Error( false ? 0 : \"No insert provided for key not already in map\");\n  var inserted = handler.insert(key, map);\n  map.set(key, inserted);\n  return inserted;\n}\n\n// src/immutableStateInvariantMiddleware.ts\nfunction isImmutableDefault(value) {\n  return _typeof(value) !== \"object\" || value == null || Object.isFrozen(value);\n}\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\n  var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\n  return {\n    detectMutations: function detectMutations() {\n      return _detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\n    }\n  };\n}\nfunction trackProperties(isImmutable) {\n  var ignorePaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var obj = arguments.length > 2 ? arguments[2] : undefined;\n  var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n  var checkedObjects = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : /* @__PURE__ */new Set();\n  var tracked = {\n    value: obj\n  };\n  if (!isImmutable(obj) && !checkedObjects.has(obj)) {\n    checkedObjects.add(obj);\n    tracked.children = {};\n    for (var key in obj) {\n      var childPath = path ? path + \".\" + key : key;\n      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\n        continue;\n      }\n      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\n    }\n  }\n  return tracked;\n}\nfunction _detectMutations(isImmutable) {\n  var ignoredPaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var trackedProperty = arguments.length > 2 ? arguments[2] : undefined;\n  var obj = arguments.length > 3 ? arguments[3] : undefined;\n  var sameParentRef = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var path = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"\";\n  var prevObj = trackedProperty ? trackedProperty.value : void 0;\n  var sameRef = prevObj === obj;\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\n    return {\n      wasMutated: true,\n      path: path\n    };\n  }\n  if (isImmutable(prevObj) || isImmutable(obj)) {\n    return {\n      wasMutated: false\n    };\n  }\n  var keysToDetect = {};\n  for (var key in trackedProperty.children) {\n    keysToDetect[key] = true;\n  }\n  for (var _key5 in obj) {\n    keysToDetect[_key5] = true;\n  }\n  var hasIgnoredPaths = ignoredPaths.length > 0;\n  var _loop = function _loop() {\n      var nestedPath = path ? path + \".\" + _key6 : _key6;\n      if (hasIgnoredPaths) {\n        var hasMatches = ignoredPaths.some(function (ignored) {\n          if (ignored instanceof RegExp) {\n            return ignored.test(nestedPath);\n          }\n          return nestedPath === ignored;\n        });\n        if (hasMatches) {\n          return 0; // continue\n        }\n      }\n      var result = _detectMutations(isImmutable, ignoredPaths, trackedProperty.children[_key6], obj[_key6], sameRef, nestedPath);\n      if (result.wasMutated) {\n        return {\n          v: result\n        };\n      }\n    },\n    _ret;\n  for (var _key6 in keysToDetect) {\n    _ret = _loop();\n    if (_ret === 0) continue;\n    if (_ret) return _ret.v;\n  }\n  return {\n    wasMutated: false\n  };\n}\nfunction createImmutableStateInvariantMiddleware() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (false) {} else {\n    var stringify2 = function stringify2(obj, serializer, indent, decycler) {\n        return JSON.stringify(obj, getSerialize2(serializer, decycler), indent);\n      },\n      getSerialize2 = function getSerialize2(serializer, decycler) {\n        var stack = [],\n          keys = [];\n        if (!decycler) decycler = function decycler(_, value) {\n          if (stack[0] === value) return \"[Circular ~]\";\n          return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n        };\n        return function (key, value) {\n          if (stack.length > 0) {\n            var thisPos = stack.indexOf(this);\n            ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n            ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n            if (~stack.indexOf(value)) value = decycler.call(this, key, value);\n          } else stack.push(value);\n          return serializer == null ? value : serializer.call(this, key, value);\n        };\n      };\n    var stringify = stringify2,\n      getSerialize = getSerialize2;\n    var _options$isImmutable = options.isImmutable,\n      isImmutable = _options$isImmutable === void 0 ? isImmutableDefault : _options$isImmutable,\n      ignoredPaths = options.ignoredPaths,\n      _options$warnAfter = options.warnAfter,\n      warnAfter = _options$warnAfter === void 0 ? 32 : _options$warnAfter;\n    var track = trackForMutations.bind(null, isImmutable, ignoredPaths);\n    return function (_ref) {\n      var getState = _ref.getState;\n      var state = getState();\n      var tracker = track(state);\n      var result;\n      return function (next) {\n        return function (action) {\n          var measureUtils = getTimeMeasureUtils(warnAfter, \"ImmutableStateInvariantMiddleware\");\n          measureUtils.measureTime(function () {\n            state = getState();\n            result = tracker.detectMutations();\n            tracker = track(state);\n            if (result.wasMutated) {\n              throw new Error( false ? 0 : \"A state mutation was detected between dispatches, in the path '\".concat(result.path || \"\", \"'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\"));\n            }\n          });\n          var dispatchedAction = next(action);\n          measureUtils.measureTime(function () {\n            state = getState();\n            result = tracker.detectMutations();\n            tracker = track(state);\n            if (result.wasMutated) {\n              throw new Error( false ? 0 : \"A state mutation was detected inside a dispatch, in the path: \".concat(result.path || \"\", \". Take a look at the reducer(s) handling the action \").concat(stringify2(action), \". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\"));\n            }\n          });\n          measureUtils.warnIfExceeded();\n          return dispatchedAction;\n        };\n      };\n    };\n  }\n}\n\n// src/serializableStateInvariantMiddleware.ts\n\nfunction isPlain(val) {\n  var type = _typeof(val);\n  return val == null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(val) || (0,redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(val);\n}\nfunction findNonSerializableValue(value) {\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  var isSerializable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : isPlain;\n  var getEntries = arguments.length > 3 ? arguments[3] : undefined;\n  var ignoredPaths = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var cache = arguments.length > 5 ? arguments[5] : undefined;\n  var foundNestedSerializable;\n  if (!isSerializable(value)) {\n    return {\n      keyPath: path || \"<root>\",\n      value: value\n    };\n  }\n  if (_typeof(value) !== \"object\" || value === null) {\n    return false;\n  }\n  if (cache !== null && cache !== void 0 && cache.has(value)) return false;\n  var entries = getEntries != null ? getEntries(value) : Object.entries(value);\n  var hasIgnoredPaths = ignoredPaths.length > 0;\n  var _iterator2 = _createForOfIteratorHelper(entries),\n    _step2;\n  try {\n    var _loop2 = function _loop2() {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n          key = _step2$value[0],\n          nestedValue = _step2$value[1];\n        var nestedPath = path ? path + \".\" + key : key;\n        if (hasIgnoredPaths) {\n          var hasMatches = ignoredPaths.some(function (ignored) {\n            if (ignored instanceof RegExp) {\n              return ignored.test(nestedPath);\n            }\n            return nestedPath === ignored;\n          });\n          if (hasMatches) {\n            return 0; // continue\n          }\n        }\n        if (!isSerializable(nestedValue)) {\n          return {\n            v: {\n              keyPath: nestedPath,\n              value: nestedValue\n            }\n          };\n        }\n        if (_typeof(nestedValue) === \"object\") {\n          foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\n          if (foundNestedSerializable) {\n            return {\n              v: foundNestedSerializable\n            };\n          }\n        }\n      },\n      _ret2;\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      _ret2 = _loop2();\n      if (_ret2 === 0) continue;\n      if (_ret2) return _ret2.v;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (cache && isNestedFrozen(value)) cache.add(value);\n  return false;\n}\nfunction isNestedFrozen(value) {\n  if (!Object.isFrozen(value)) return false;\n  for (var _i = 0, _Object$values = Object.values(value); _i < _Object$values.length; _i++) {\n    var nestedValue = _Object$values[_i];\n    if (_typeof(nestedValue) !== \"object\" || nestedValue === null) continue;\n    if (!isNestedFrozen(nestedValue)) return false;\n  }\n  return true;\n}\nfunction createSerializableStateInvariantMiddleware() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (false) {} else {\n    var _options$isSerializab = options.isSerializable,\n      isSerializable = _options$isSerializab === void 0 ? isPlain : _options$isSerializab,\n      getEntries = options.getEntries,\n      _options$ignoredActio = options.ignoredActions,\n      ignoredActions = _options$ignoredActio === void 0 ? [] : _options$ignoredActio,\n      _options$ignoredActio2 = options.ignoredActionPaths,\n      ignoredActionPaths = _options$ignoredActio2 === void 0 ? [\"meta.arg\", \"meta.baseQueryMeta\"] : _options$ignoredActio2,\n      _options$ignoredPaths = options.ignoredPaths,\n      ignoredPaths = _options$ignoredPaths === void 0 ? [] : _options$ignoredPaths,\n      _options$warnAfter2 = options.warnAfter,\n      warnAfter = _options$warnAfter2 === void 0 ? 32 : _options$warnAfter2,\n      _options$ignoreState = options.ignoreState,\n      ignoreState = _options$ignoreState === void 0 ? false : _options$ignoreState,\n      _options$ignoreAction = options.ignoreActions,\n      ignoreActions = _options$ignoreAction === void 0 ? false : _options$ignoreAction,\n      _options$disableCache = options.disableCache,\n      disableCache = _options$disableCache === void 0 ? false : _options$disableCache;\n    var cache = !disableCache && WeakSet ? /* @__PURE__ */new WeakSet() : void 0;\n    return function (storeAPI) {\n      return function (next) {\n        return function (action) {\n          if (!(0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\n            return next(action);\n          }\n          var result = next(action);\n          var measureUtils = getTimeMeasureUtils(warnAfter, \"SerializableStateInvariantMiddleware\");\n          if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\n            measureUtils.measureTime(function () {\n              var foundActionNonSerializableValue = findNonSerializableValue(action, \"\", isSerializable, getEntries, ignoredActionPaths, cache);\n              if (foundActionNonSerializableValue) {\n                var keyPath = foundActionNonSerializableValue.keyPath,\n                  value = foundActionNonSerializableValue.value;\n                console.error(\"A non-serializable value was detected in an action, in the path: `\".concat(keyPath, \"`. Value:\"), value, \"\\nTake a look at the logic that dispatched this action: \", action, \"\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)\", \"\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)\");\n              }\n            });\n          }\n          if (!ignoreState) {\n            measureUtils.measureTime(function () {\n              var state = storeAPI.getState();\n              var foundStateNonSerializableValue = findNonSerializableValue(state, \"\", isSerializable, getEntries, ignoredPaths, cache);\n              if (foundStateNonSerializableValue) {\n                var keyPath = foundStateNonSerializableValue.keyPath,\n                  value = foundStateNonSerializableValue.value;\n                console.error(\"A non-serializable value was detected in the state, in the path: `\".concat(keyPath, \"`. Value:\"), value, \"\\nTake a look at the reducer(s) handling this action type: \".concat(action.type, \".\\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)\"));\n              }\n            });\n            measureUtils.warnIfExceeded();\n          }\n          return result;\n        };\n      };\n    };\n  }\n}\n\n// src/getDefaultMiddleware.ts\nfunction isBoolean(x) {\n  return typeof x === \"boolean\";\n}\nvar buildGetDefaultMiddleware = function buildGetDefaultMiddleware() {\n  return function getDefaultMiddleware(options) {\n    var _ref2 = options !== null && options !== void 0 ? options : {},\n      _ref2$thunk = _ref2.thunk,\n      thunk = _ref2$thunk === void 0 ? true : _ref2$thunk,\n      _ref2$immutableCheck = _ref2.immutableCheck,\n      immutableCheck = _ref2$immutableCheck === void 0 ? true : _ref2$immutableCheck,\n      _ref2$serializableChe = _ref2.serializableCheck,\n      serializableCheck = _ref2$serializableChe === void 0 ? true : _ref2$serializableChe,\n      _ref2$actionCreatorCh = _ref2.actionCreatorCheck,\n      actionCreatorCheck = _ref2$actionCreatorCh === void 0 ? true : _ref2$actionCreatorCh;\n    var middlewareArray = new Tuple();\n    if (thunk) {\n      if (isBoolean(thunk)) {\n        middlewareArray.push(redux_thunk__WEBPACK_IMPORTED_MODULE_3__.thunk);\n      } else {\n        middlewareArray.push((0,redux_thunk__WEBPACK_IMPORTED_MODULE_3__.withExtraArgument)(thunk.extraArgument));\n      }\n    }\n    if (true) {\n      if (immutableCheck) {\n        var immutableOptions = {};\n        if (!isBoolean(immutableCheck)) {\n          immutableOptions = immutableCheck;\n        }\n        middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\n      }\n      if (serializableCheck) {\n        var serializableOptions = {};\n        if (!isBoolean(serializableCheck)) {\n          serializableOptions = serializableCheck;\n        }\n        middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\n      }\n      if (actionCreatorCheck) {\n        var actionCreatorOptions = {};\n        if (!isBoolean(actionCreatorCheck)) {\n          actionCreatorOptions = actionCreatorCheck;\n        }\n        middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\n      }\n    }\n    return middlewareArray;\n  };\n};\n\n// src/autoBatchEnhancer.ts\nvar SHOULD_AUTOBATCH = \"RTK_autoBatch\";\nvar prepareAutoBatched = function prepareAutoBatched() {\n  return function (payload) {\n    return {\n      payload: payload,\n      meta: _defineProperty({}, SHOULD_AUTOBATCH, true)\n    };\n  };\n};\nvar createQueueWithTimer = function createQueueWithTimer(timeout) {\n  return function (notify) {\n    setTimeout(notify, timeout);\n  };\n};\nvar rAF =  false ? 0 : createQueueWithTimer(10);\nvar autoBatchEnhancer = function autoBatchEnhancer() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    type: \"raf\"\n  };\n  return function (next) {\n    return function () {\n      var store = next.apply(void 0, arguments);\n      var notifying = true;\n      var shouldNotifyAtEndOfTick = false;\n      var notificationQueued = false;\n      var listeners = /* @__PURE__ */new Set();\n      var queueCallback = options.type === \"tick\" ? queueMicrotask : options.type === \"raf\" ? rAF : options.type === \"callback\" ? options.queueNotification : createQueueWithTimer(options.timeout);\n      var notifyListeners = function notifyListeners() {\n        notificationQueued = false;\n        if (shouldNotifyAtEndOfTick) {\n          shouldNotifyAtEndOfTick = false;\n          listeners.forEach(function (l) {\n            return l();\n          });\n        }\n      };\n      return Object.assign({}, store, {\n        // Override the base `store.subscribe` method to keep original listeners\n        // from running if we're delaying notifications\n        subscribe: function subscribe(listener2) {\n          var wrappedListener = function wrappedListener() {\n            return notifying && listener2();\n          };\n          var unsubscribe = store.subscribe(wrappedListener);\n          listeners.add(listener2);\n          return function () {\n            unsubscribe();\n            listeners[\"delete\"](listener2);\n          };\n        },\n        // Override the base `store.dispatch` method so that we can check actions\n        // for the `shouldAutoBatch` flag and determine if batching is active\n        dispatch: function dispatch(action) {\n          try {\n            var _action$meta;\n            notifying = !(action !== null && action !== void 0 && (_action$meta = action.meta) !== null && _action$meta !== void 0 && _action$meta[SHOULD_AUTOBATCH]);\n            shouldNotifyAtEndOfTick = !notifying;\n            if (shouldNotifyAtEndOfTick) {\n              if (!notificationQueued) {\n                notificationQueued = true;\n                queueCallback(notifyListeners);\n              }\n            }\n            return store.dispatch(action);\n          } finally {\n            notifying = true;\n          }\n        }\n      });\n    };\n  };\n};\n\n// src/getDefaultEnhancers.ts\nvar buildGetDefaultEnhancers = function buildGetDefaultEnhancers(middlewareEnhancer) {\n  return function getDefaultEnhancers(options) {\n    var _ref3 = options !== null && options !== void 0 ? options : {},\n      _ref3$autoBatch = _ref3.autoBatch,\n      autoBatch = _ref3$autoBatch === void 0 ? true : _ref3$autoBatch;\n    var enhancerArray = new Tuple(middlewareEnhancer);\n    if (autoBatch) {\n      enhancerArray.push(autoBatchEnhancer(_typeof(autoBatch) === \"object\" ? autoBatch : void 0));\n    }\n    return enhancerArray;\n  };\n};\n\n// src/configureStore.ts\nvar IS_PRODUCTION = false;\nfunction configureStore(options) {\n  var getDefaultMiddleware = buildGetDefaultMiddleware();\n  var _ref4 = options || {},\n    _ref4$reducer = _ref4.reducer,\n    reducer = _ref4$reducer === void 0 ? void 0 : _ref4$reducer,\n    middleware = _ref4.middleware,\n    _ref4$devTools = _ref4.devTools,\n    devTools = _ref4$devTools === void 0 ? true : _ref4$devTools,\n    _ref4$preloadedState = _ref4.preloadedState,\n    preloadedState = _ref4$preloadedState === void 0 ? void 0 : _ref4$preloadedState,\n    _ref4$enhancers = _ref4.enhancers,\n    enhancers = _ref4$enhancers === void 0 ? void 0 : _ref4$enhancers;\n  var rootReducer;\n  if (typeof reducer === \"function\") {\n    rootReducer = reducer;\n  } else if ((0,redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(reducer)) {\n    rootReducer = (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducer);\n  } else {\n    throw new Error( false ? 0 : \"`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers\");\n  }\n  if (!IS_PRODUCTION && middleware && typeof middleware !== \"function\") {\n    throw new Error( false ? 0 : \"`middleware` field must be a callback\");\n  }\n  var finalMiddleware;\n  if (typeof middleware === \"function\") {\n    finalMiddleware = middleware(getDefaultMiddleware);\n    if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {\n      throw new Error( false ? 0 : \"when using a middleware builder function, an array of middleware must be returned\");\n    }\n  } else {\n    finalMiddleware = getDefaultMiddleware();\n  }\n  if (!IS_PRODUCTION && finalMiddleware.some(function (item) {\n    return typeof item !== \"function\";\n  })) {\n    throw new Error( false ? 0 : \"each middleware provided to configureStore must be a function\");\n  }\n  var finalCompose = redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n  if (devTools) {\n    finalCompose = composeWithDevTools(_objectSpread({\n      // Enable capture of stack traces for dispatched Redux actions\n      trace: !IS_PRODUCTION\n    }, _typeof(devTools) === \"object\" && devTools));\n  }\n  var middlewareEnhancer = redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware.apply(void 0, _toConsumableArray(finalMiddleware));\n  var getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);\n  if (!IS_PRODUCTION && enhancers && typeof enhancers !== \"function\") {\n    throw new Error( false ? 0 : \"`enhancers` field must be a callback\");\n  }\n  var storeEnhancers = typeof enhancers === \"function\" ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();\n  if (!IS_PRODUCTION && !Array.isArray(storeEnhancers)) {\n    throw new Error( false ? 0 : \"`enhancers` callback must return an array\");\n  }\n  if (!IS_PRODUCTION && storeEnhancers.some(function (item) {\n    return typeof item !== \"function\";\n  })) {\n    throw new Error( false ? 0 : \"each enhancer provided to configureStore must be a function\");\n  }\n  if (!IS_PRODUCTION && finalMiddleware.length && !storeEnhancers.includes(middlewareEnhancer)) {\n    console.error(\"middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`\");\n  }\n  var composedEnhancer = finalCompose.apply(void 0, _toConsumableArray(storeEnhancers));\n  return (0,redux__WEBPACK_IMPORTED_MODULE_0__.createStore)(rootReducer, preloadedState, composedEnhancer);\n}\n\n// src/createReducer.ts\n\n\n// src/mapBuilders.ts\nfunction executeReducerBuilderCallback(builderCallback) {\n  var actionsMap = {};\n  var actionMatchers = [];\n  var defaultCaseReducer;\n  var builder = {\n    addCase: function addCase(typeOrActionCreator, reducer) {\n      if (true) {\n        if (actionMatchers.length > 0) {\n          throw new Error( false ? 0 : \"`builder.addCase` should only be called before calling `builder.addMatcher`\");\n        }\n        if (defaultCaseReducer) {\n          throw new Error( false ? 0 : \"`builder.addCase` should only be called before calling `builder.addDefaultCase`\");\n        }\n      }\n      var type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n      if (!type) {\n        throw new Error( false ? 0 : \"`builder.addCase` cannot be called with an empty action type\");\n      }\n      if (type in actionsMap) {\n        throw new Error( false ? 0 : \"`builder.addCase` cannot be called with two reducers for the same action type '\".concat(type, \"'\"));\n      }\n      actionsMap[type] = reducer;\n      return builder;\n    },\n    addMatcher: function addMatcher(matcher, reducer) {\n      if (true) {\n        if (defaultCaseReducer) {\n          throw new Error( false ? 0 : \"`builder.addMatcher` should only be called before calling `builder.addDefaultCase`\");\n        }\n      }\n      actionMatchers.push({\n        matcher: matcher,\n        reducer: reducer\n      });\n      return builder;\n    },\n    addDefaultCase: function addDefaultCase(reducer) {\n      if (true) {\n        if (defaultCaseReducer) {\n          throw new Error( false ? 0 : \"`builder.addDefaultCase` can only be called once\");\n        }\n      }\n      defaultCaseReducer = reducer;\n      return builder;\n    }\n  };\n  builderCallback(builder);\n  return [actionsMap, actionMatchers, defaultCaseReducer];\n}\n\n// src/createReducer.ts\nfunction isStateFunction(x) {\n  return typeof x === \"function\";\n}\nfunction createReducer(initialState, mapOrBuilderCallback) {\n  if (true) {\n    if (_typeof(mapOrBuilderCallback) === \"object\") {\n      throw new Error( false ? 0 : \"The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\n    }\n  }\n  var _executeReducerBuilde = executeReducerBuilderCallback(mapOrBuilderCallback),\n    _executeReducerBuilde2 = _slicedToArray(_executeReducerBuilde, 3),\n    actionsMap = _executeReducerBuilde2[0],\n    finalActionMatchers = _executeReducerBuilde2[1],\n    finalDefaultCaseReducer = _executeReducerBuilde2[2];\n  var getInitialState;\n  if (isStateFunction(initialState)) {\n    getInitialState = function getInitialState() {\n      return freezeDraftable(initialState());\n    };\n  } else {\n    var frozenInitialState = freezeDraftable(initialState);\n    getInitialState = function getInitialState() {\n      return frozenInitialState;\n    };\n  }\n  function reducer() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getInitialState();\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    var caseReducers = [actionsMap[action.type]].concat(_toConsumableArray(finalActionMatchers.filter(function (_ref5) {\n      var matcher = _ref5.matcher;\n      return matcher(action);\n    }).map(function (_ref6) {\n      var reducer2 = _ref6.reducer;\n      return reducer2;\n    })));\n    if (caseReducers.filter(function (cr) {\n      return !!cr;\n    }).length === 0) {\n      caseReducers = [finalDefaultCaseReducer];\n    }\n    return caseReducers.reduce(function (previousState, caseReducer) {\n      if (caseReducer) {\n        if ((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(previousState)) {\n          var draft = previousState;\n          var result = caseReducer(draft, action);\n          if (result === void 0) {\n            return previousState;\n          }\n          return result;\n        } else if (!(0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(previousState)) {\n          var _result = caseReducer(previousState, action);\n          if (_result === void 0) {\n            if (previousState === null) {\n              return previousState;\n            }\n            throw new Error( false ? 0 : \"A case reducer on a non-draftable value must not return undefined\");\n          }\n          return _result;\n        } else {\n          return (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(previousState, function (draft) {\n            return caseReducer(draft, action);\n          });\n        }\n      }\n      return previousState;\n    }, state);\n  }\n  reducer.getInitialState = getInitialState;\n  return reducer;\n}\n\n// src/nanoid.ts\nvar urlAlphabet = \"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW\";\nvar nanoid = function nanoid() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  var id = \"\";\n  var i = size;\n  while (i--) {\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n  return id;\n};\n\n// src/matchers.ts\nvar matches = function matches(matcher, action) {\n  if (hasMatchFunction(matcher)) {\n    return matcher.match(action);\n  } else {\n    return matcher(action);\n  }\n};\nfunction isAnyOf() {\n  for (var _len5 = arguments.length, matchers = new Array(_len5), _key7 = 0; _key7 < _len5; _key7++) {\n    matchers[_key7] = arguments[_key7];\n  }\n  return function (action) {\n    return matchers.some(function (matcher) {\n      return matches(matcher, action);\n    });\n  };\n}\nfunction isAllOf() {\n  for (var _len6 = arguments.length, matchers = new Array(_len6), _key8 = 0; _key8 < _len6; _key8++) {\n    matchers[_key8] = arguments[_key8];\n  }\n  return function (action) {\n    return matchers.every(function (matcher) {\n      return matches(matcher, action);\n    });\n  };\n}\nfunction hasExpectedRequestMetadata(action, validStatus) {\n  if (!action || !action.meta) return false;\n  var hasValidRequestId = typeof action.meta.requestId === \"string\";\n  var hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\n  return hasValidRequestId && hasValidRequestStatus;\n}\nfunction isAsyncThunkArray(a) {\n  return typeof a[0] === \"function\" && \"pending\" in a[0] && \"fulfilled\" in a[0] && \"rejected\" in a[0];\n}\nfunction isPending() {\n  for (var _len7 = arguments.length, asyncThunks = new Array(_len7), _key9 = 0; _key9 < _len7; _key9++) {\n    asyncThunks[_key9] = arguments[_key9];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"pending\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isPending()(asyncThunks[0]);\n  }\n  return isAnyOf.apply(void 0, _toConsumableArray(asyncThunks.map(function (asyncThunk) {\n    return asyncThunk.pending;\n  })));\n}\nfunction isRejected() {\n  for (var _len8 = arguments.length, asyncThunks = new Array(_len8), _key10 = 0; _key10 < _len8; _key10++) {\n    asyncThunks[_key10] = arguments[_key10];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"rejected\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejected()(asyncThunks[0]);\n  }\n  return isAnyOf.apply(void 0, _toConsumableArray(asyncThunks.map(function (asyncThunk) {\n    return asyncThunk.rejected;\n  })));\n}\nfunction isRejectedWithValue() {\n  var hasFlag = function hasFlag(action) {\n    return action && action.meta && action.meta.rejectedWithValue;\n  };\n  for (var _len9 = arguments.length, asyncThunks = new Array(_len9), _key11 = 0; _key11 < _len9; _key11++) {\n    asyncThunks[_key11] = arguments[_key11];\n  }\n  if (asyncThunks.length === 0) {\n    return isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejectedWithValue()(asyncThunks[0]);\n  }\n  return isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\n}\nfunction isFulfilled() {\n  for (var _len10 = arguments.length, asyncThunks = new Array(_len10), _key12 = 0; _key12 < _len10; _key12++) {\n    asyncThunks[_key12] = arguments[_key12];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"fulfilled\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isFulfilled()(asyncThunks[0]);\n  }\n  return isAnyOf.apply(void 0, _toConsumableArray(asyncThunks.map(function (asyncThunk) {\n    return asyncThunk.fulfilled;\n  })));\n}\nfunction isAsyncThunkAction() {\n  for (var _len11 = arguments.length, asyncThunks = new Array(_len11), _key13 = 0; _key13 < _len11; _key13++) {\n    asyncThunks[_key13] = arguments[_key13];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"pending\", \"fulfilled\", \"rejected\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isAsyncThunkAction()(asyncThunks[0]);\n  }\n  return isAnyOf.apply(void 0, _toConsumableArray(asyncThunks.flatMap(function (asyncThunk) {\n    return [asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled];\n  })));\n}\n\n// src/createAsyncThunk.ts\nvar commonProperties = [\"name\", \"message\", \"stack\", \"code\"];\nvar RejectWithValue = /*#__PURE__*/_createClass(function RejectWithValue(payload, meta) {\n  _classCallCheck(this, RejectWithValue);\n  /*\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\n  does not exist at runtime\n  */\n  this._type = void 0;\n  this.payload = payload;\n  this.meta = meta;\n});\nvar FulfillWithMeta = /*#__PURE__*/_createClass(function FulfillWithMeta(payload, meta) {\n  _classCallCheck(this, FulfillWithMeta);\n  /*\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\n  does not exist at runtime\n  */\n  this._type = void 0;\n  this.payload = payload;\n  this.meta = meta;\n});\nvar miniSerializeError = function miniSerializeError(value) {\n  if (_typeof(value) === \"object\" && value !== null) {\n    var simpleError = {};\n    for (var _i2 = 0, _commonProperties = commonProperties; _i2 < _commonProperties.length; _i2++) {\n      var property = _commonProperties[_i2];\n      if (typeof value[property] === \"string\") {\n        simpleError[property] = value[property];\n      }\n    }\n    return simpleError;\n  }\n  return {\n    message: String(value)\n  };\n};\nvar createAsyncThunk = /* @__PURE__ */function () {\n  function createAsyncThunk2(typePrefix, payloadCreator, options) {\n    var fulfilled = createAction(typePrefix + \"/fulfilled\", function (payload, requestId, arg, meta) {\n      return {\n        payload: payload,\n        meta: _objectSpread(_objectSpread({}, meta || {}), {}, {\n          arg: arg,\n          requestId: requestId,\n          requestStatus: \"fulfilled\"\n        })\n      };\n    });\n    var pending = createAction(typePrefix + \"/pending\", function (requestId, arg, meta) {\n      return {\n        payload: void 0,\n        meta: _objectSpread(_objectSpread({}, meta || {}), {}, {\n          arg: arg,\n          requestId: requestId,\n          requestStatus: \"pending\"\n        })\n      };\n    });\n    var rejected = createAction(typePrefix + \"/rejected\", function (error, requestId, arg, payload, meta) {\n      return {\n        payload: payload,\n        error: (options && options.serializeError || miniSerializeError)(error || \"Rejected\"),\n        meta: _objectSpread(_objectSpread({}, meta || {}), {}, {\n          arg: arg,\n          requestId: requestId,\n          rejectedWithValue: !!payload,\n          requestStatus: \"rejected\",\n          aborted: (error === null || error === void 0 ? void 0 : error.name) === \"AbortError\",\n          condition: (error === null || error === void 0 ? void 0 : error.name) === \"ConditionError\"\n        })\n      };\n    });\n    function actionCreator(arg) {\n      return function (dispatch, getState, extra) {\n        var requestId = options !== null && options !== void 0 && options.idGenerator ? options.idGenerator(arg) : nanoid();\n        var abortController = new AbortController();\n        var abortHandler;\n        var abortReason;\n        function abort(reason) {\n          abortReason = reason;\n          abortController.abort();\n        }\n        var promise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var finalAction, _options$condition, _options$getPendingMe, conditionResult, abortedPromise, skipDispatch;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                conditionResult = options === null || options === void 0 || (_options$condition = options.condition) === null || _options$condition === void 0 ? void 0 : _options$condition.call(options, arg, {\n                  getState: getState,\n                  extra: extra\n                });\n                if (!isThenable(conditionResult)) {\n                  _context.next = 6;\n                  break;\n                }\n                _context.next = 5;\n                return conditionResult;\n              case 5:\n                conditionResult = _context.sent;\n              case 6:\n                if (!(conditionResult === false || abortController.signal.aborted)) {\n                  _context.next = 8;\n                  break;\n                }\n                throw {\n                  name: \"ConditionError\",\n                  message: \"Aborted due to condition callback returning false.\"\n                };\n              case 8:\n                abortedPromise = new Promise(function (_, reject) {\n                  abortHandler = function abortHandler() {\n                    reject({\n                      name: \"AbortError\",\n                      message: abortReason || \"Aborted\"\n                    });\n                  };\n                  abortController.signal.addEventListener(\"abort\", abortHandler);\n                });\n                dispatch(pending(requestId, arg, options === null || options === void 0 || (_options$getPendingMe = options.getPendingMeta) === null || _options$getPendingMe === void 0 ? void 0 : _options$getPendingMe.call(options, {\n                  requestId: requestId,\n                  arg: arg\n                }, {\n                  getState: getState,\n                  extra: extra\n                })));\n                _context.next = 12;\n                return Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {\n                  dispatch: dispatch,\n                  getState: getState,\n                  extra: extra,\n                  requestId: requestId,\n                  signal: abortController.signal,\n                  abort: abort,\n                  rejectWithValue: function rejectWithValue(value, meta) {\n                    return new RejectWithValue(value, meta);\n                  },\n                  fulfillWithValue: function fulfillWithValue(value, meta) {\n                    return new FulfillWithMeta(value, meta);\n                  }\n                })).then(function (result) {\n                  if (result instanceof RejectWithValue) {\n                    throw result;\n                  }\n                  if (result instanceof FulfillWithMeta) {\n                    return fulfilled(result.payload, requestId, arg, result.meta);\n                  }\n                  return fulfilled(result, requestId, arg);\n                })]);\n              case 12:\n                finalAction = _context.sent;\n                _context.next = 18;\n                break;\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](0);\n                finalAction = _context.t0 instanceof RejectWithValue ? rejected(null, requestId, arg, _context.t0.payload, _context.t0.meta) : rejected(_context.t0, requestId, arg);\n              case 18:\n                _context.prev = 18;\n                if (abortHandler) {\n                  abortController.signal.removeEventListener(\"abort\", abortHandler);\n                }\n                return _context.finish(18);\n              case 21:\n                skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\n                if (!skipDispatch) {\n                  dispatch(finalAction);\n                }\n                return _context.abrupt(\"return\", finalAction);\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, null, [[0, 15, 18, 21]]);\n        }))();\n        return Object.assign(promise, {\n          abort: abort,\n          requestId: requestId,\n          arg: arg,\n          unwrap: function unwrap() {\n            return promise.then(unwrapResult);\n          }\n        });\n      };\n    }\n    return Object.assign(actionCreator, {\n      pending: pending,\n      rejected: rejected,\n      fulfilled: fulfilled,\n      settled: isAnyOf(rejected, fulfilled),\n      typePrefix: typePrefix\n    });\n  }\n  createAsyncThunk2.withTypes = function () {\n    return createAsyncThunk2;\n  };\n  return createAsyncThunk2;\n}();\nfunction unwrapResult(action) {\n  if (action.meta && action.meta.rejectedWithValue) {\n    throw action.payload;\n  }\n  if (action.error) {\n    throw action.error;\n  }\n  return action.payload;\n}\nfunction isThenable(value) {\n  return value !== null && _typeof(value) === \"object\" && typeof value.then === \"function\";\n}\n\n// src/createSlice.ts\nvar asyncThunkSymbol = /* @__PURE__ */Symbol[\"for\"](\"rtk-slice-createasyncthunk\");\nvar asyncThunkCreator = _defineProperty({}, asyncThunkSymbol, createAsyncThunk);\nvar ReducerType = /* @__PURE__ */function (ReducerType2) {\n  ReducerType2[\"reducer\"] = \"reducer\";\n  ReducerType2[\"reducerWithPrepare\"] = \"reducerWithPrepare\";\n  ReducerType2[\"asyncThunk\"] = \"asyncThunk\";\n  return ReducerType2;\n}(ReducerType || {});\nfunction getType(slice, actionKey) {\n  return \"\".concat(slice, \"/\").concat(actionKey);\n}\nfunction buildCreateSlice() {\n  var _creators$asyncThunk;\n  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    creators = _ref8.creators;\n  var cAT = creators === null || creators === void 0 || (_creators$asyncThunk = creators.asyncThunk) === null || _creators$asyncThunk === void 0 ? void 0 : _creators$asyncThunk[asyncThunkSymbol];\n  return function createSlice2(options) {\n    var name = options.name,\n      _options$reducerPath = options.reducerPath,\n      reducerPath = _options$reducerPath === void 0 ? name : _options$reducerPath;\n    if (!name) {\n      throw new Error( false ? 0 : \"`name` is a required option for createSlice\");\n    }\n    if (typeof process !== \"undefined\" && true) {\n      if (options.initialState === void 0) {\n        console.error(\"You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`\");\n      }\n    }\n    var reducers = (typeof options.reducers === \"function\" ? options.reducers(buildReducerCreators()) : options.reducers) || {};\n    var reducerNames = Object.keys(reducers);\n    var context = {\n      sliceCaseReducersByName: {},\n      sliceCaseReducersByType: {},\n      actionCreators: {},\n      sliceMatchers: []\n    };\n    var contextMethods = {\n      addCase: function addCase(typeOrActionCreator, reducer2) {\n        var type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n        if (!type) {\n          throw new Error( false ? 0 : \"`context.addCase` cannot be called with an empty action type\");\n        }\n        if (type in context.sliceCaseReducersByType) {\n          throw new Error( false ? 0 : \"`context.addCase` cannot be called with two reducers for the same action type: \" + type);\n        }\n        context.sliceCaseReducersByType[type] = reducer2;\n        return contextMethods;\n      },\n      addMatcher: function addMatcher(matcher, reducer2) {\n        context.sliceMatchers.push({\n          matcher: matcher,\n          reducer: reducer2\n        });\n        return contextMethods;\n      },\n      exposeAction: function exposeAction(name2, actionCreator) {\n        context.actionCreators[name2] = actionCreator;\n        return contextMethods;\n      },\n      exposeCaseReducer: function exposeCaseReducer(name2, reducer2) {\n        context.sliceCaseReducersByName[name2] = reducer2;\n        return contextMethods;\n      }\n    };\n    reducerNames.forEach(function (reducerName) {\n      var reducerDefinition = reducers[reducerName];\n      var reducerDetails = {\n        reducerName: reducerName,\n        type: getType(name, reducerName),\n        createNotation: typeof options.reducers === \"function\"\n      };\n      if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {\n        handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);\n      } else {\n        handleNormalReducerDefinition(reducerDetails, reducerDefinition, contextMethods);\n      }\n    });\n    function buildReducer() {\n      if (true) {\n        if (_typeof(options.extraReducers) === \"object\") {\n          throw new Error( false ? 0 : \"The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\n        }\n      }\n      var _ref9 = typeof options.extraReducers === \"function\" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers],\n        _ref10 = _slicedToArray(_ref9, 3),\n        _ref10$ = _ref10[0],\n        extraReducers = _ref10$ === void 0 ? {} : _ref10$,\n        _ref10$2 = _ref10[1],\n        actionMatchers = _ref10$2 === void 0 ? [] : _ref10$2,\n        _ref10$3 = _ref10[2],\n        defaultCaseReducer = _ref10$3 === void 0 ? void 0 : _ref10$3;\n      var finalCaseReducers = _objectSpread(_objectSpread({}, extraReducers), context.sliceCaseReducersByType);\n      return createReducer(options.initialState, function (builder) {\n        for (var key in finalCaseReducers) {\n          builder.addCase(key, finalCaseReducers[key]);\n        }\n        var _iterator3 = _createForOfIteratorHelper(context.sliceMatchers),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var sM = _step3.value;\n            builder.addMatcher(sM.matcher, sM.reducer);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        var _iterator4 = _createForOfIteratorHelper(actionMatchers),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var m = _step4.value;\n            builder.addMatcher(m.matcher, m.reducer);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        if (defaultCaseReducer) {\n          builder.addDefaultCase(defaultCaseReducer);\n        }\n      });\n    }\n    var selectSelf = function selectSelf(state) {\n      return state;\n    };\n    var injectedSelectorCache = /* @__PURE__ */new Map();\n    var _reducer;\n    function reducer(state, action) {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer(state, action);\n    }\n    function getInitialState() {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer.getInitialState();\n    }\n    function makeSelectorProps(reducerPath2) {\n      var injected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      function selectSlice(state) {\n        var sliceState = state[reducerPath2];\n        if (typeof sliceState === \"undefined\") {\n          if (injected) {\n            sliceState = getInitialState();\n          } else if (true) {\n            throw new Error( false ? 0 : \"selectSlice returned undefined for an uninjected slice reducer\");\n          }\n        }\n        return sliceState;\n      }\n      function getSelectors() {\n        var selectState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : selectSelf;\n        var selectorCache = emplace(injectedSelectorCache, injected, {\n          insert: function insert() {\n            return /* @__PURE__ */new WeakMap();\n          }\n        });\n        return emplace(selectorCache, selectState, {\n          insert: function insert() {\n            var map = {};\n            for (var _i3 = 0, _Object$entries = Object.entries((_options$selectors = options.selectors) !== null && _options$selectors !== void 0 ? _options$selectors : {}); _i3 < _Object$entries.length; _i3++) {\n              var _options$selectors;\n              var _Object$entries$_i = _slicedToArray(_Object$entries[_i3], 2),\n                name2 = _Object$entries$_i[0],\n                selector = _Object$entries$_i[1];\n              map[name2] = wrapSelector(selector, selectState, getInitialState, injected);\n            }\n            return map;\n          }\n        });\n      }\n      return {\n        reducerPath: reducerPath2,\n        getSelectors: getSelectors,\n        get selectors() {\n          return getSelectors(selectSlice);\n        },\n        selectSlice: selectSlice\n      };\n    }\n    var slice = _objectSpread(_objectSpread({\n      name: name,\n      reducer: reducer,\n      actions: context.actionCreators,\n      caseReducers: context.sliceCaseReducersByName,\n      getInitialState: getInitialState\n    }, makeSelectorProps(reducerPath)), {}, {\n      injectInto: function injectInto(injectable) {\n        var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          pathOpt = _ref11.reducerPath,\n          config = _objectWithoutProperties(_ref11, _excluded);\n        var newReducerPath = pathOpt !== null && pathOpt !== void 0 ? pathOpt : reducerPath;\n        injectable.inject({\n          reducerPath: newReducerPath,\n          reducer: reducer\n        }, config);\n        return _objectSpread(_objectSpread({}, slice), makeSelectorProps(newReducerPath, true));\n      }\n    });\n    return slice;\n  };\n}\nfunction wrapSelector(selector, selectState, getInitialState, injected) {\n  function wrapper(rootState) {\n    var sliceState = selectState(rootState);\n    if (typeof sliceState === \"undefined\") {\n      if (injected) {\n        sliceState = getInitialState();\n      } else if (true) {\n        throw new Error( false ? 0 : \"selectState returned undefined for an uninjected slice reducer\");\n      }\n    }\n    for (var _len12 = arguments.length, args = new Array(_len12 > 1 ? _len12 - 1 : 0), _key14 = 1; _key14 < _len12; _key14++) {\n      args[_key14 - 1] = arguments[_key14];\n    }\n    return selector.apply(void 0, [sliceState].concat(args));\n  }\n  wrapper.unwrapped = selector;\n  return wrapper;\n}\nvar createSlice = /* @__PURE__ */buildCreateSlice();\nfunction buildReducerCreators() {\n  function asyncThunk(payloadCreator, config) {\n    return _objectSpread({\n      _reducerDefinitionType: \"asyncThunk\" /* asyncThunk */,\n      payloadCreator: payloadCreator\n    }, config);\n  }\n  asyncThunk.withTypes = function () {\n    return asyncThunk;\n  };\n  return {\n    reducer: function reducer(caseReducer) {\n      return Object.assign(_defineProperty({}, caseReducer.name, function () {\n        return caseReducer.apply(void 0, arguments);\n      })[caseReducer.name], {\n        _reducerDefinitionType: \"reducer\" /* reducer */\n      });\n    },\n    preparedReducer: function preparedReducer(prepare, reducer) {\n      return {\n        _reducerDefinitionType: \"reducerWithPrepare\" /* reducerWithPrepare */,\n        prepare: prepare,\n        reducer: reducer\n      };\n    },\n    asyncThunk: asyncThunk\n  };\n}\nfunction handleNormalReducerDefinition(_ref12, maybeReducerWithPrepare, context) {\n  var type = _ref12.type,\n    reducerName = _ref12.reducerName,\n    createNotation = _ref12.createNotation;\n  var caseReducer;\n  var prepareCallback;\n  if (\"reducer\" in maybeReducerWithPrepare) {\n    if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {\n      throw new Error( false ? 0 : \"Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.\");\n    }\n    caseReducer = maybeReducerWithPrepare.reducer;\n    prepareCallback = maybeReducerWithPrepare.prepare;\n  } else {\n    caseReducer = maybeReducerWithPrepare;\n  }\n  context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));\n}\nfunction isAsyncThunkSliceReducerDefinition(reducerDefinition) {\n  return reducerDefinition._reducerDefinitionType === \"asyncThunk\" /* asyncThunk */;\n}\n\nfunction isCaseReducerWithPrepareDefinition(reducerDefinition) {\n  return reducerDefinition._reducerDefinitionType === \"reducerWithPrepare\" /* reducerWithPrepare */;\n}\n\nfunction handleThunkCaseReducerDefinition(_ref13, reducerDefinition, context, cAT) {\n  var type = _ref13.type,\n    reducerName = _ref13.reducerName;\n  if (!cAT) {\n    throw new Error( false ? 0 : \"Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.\");\n  }\n  var payloadCreator = reducerDefinition.payloadCreator,\n    fulfilled = reducerDefinition.fulfilled,\n    pending = reducerDefinition.pending,\n    rejected = reducerDefinition.rejected,\n    settled = reducerDefinition.settled,\n    options = reducerDefinition.options;\n  var thunk = cAT(type, payloadCreator, options);\n  context.exposeAction(reducerName, thunk);\n  if (fulfilled) {\n    context.addCase(thunk.fulfilled, fulfilled);\n  }\n  if (pending) {\n    context.addCase(thunk.pending, pending);\n  }\n  if (rejected) {\n    context.addCase(thunk.rejected, rejected);\n  }\n  if (settled) {\n    context.addMatcher(thunk.settled, settled);\n  }\n  context.exposeCaseReducer(reducerName, {\n    fulfilled: fulfilled || noop,\n    pending: pending || noop,\n    rejected: rejected || noop,\n    settled: settled || noop\n  });\n}\nfunction noop() {}\n\n// src/entities/entity_state.ts\nfunction getInitialEntityState() {\n  return {\n    ids: [],\n    entities: {}\n  };\n}\nfunction createInitialStateFactory(stateAdapter) {\n  function getInitialState() {\n    var additionalState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var entities = arguments.length > 1 ? arguments[1] : undefined;\n    var state = Object.assign(getInitialEntityState(), additionalState);\n    return entities ? stateAdapter.setAll(state, entities) : state;\n  }\n  return {\n    getInitialState: getInitialState\n  };\n}\n\n// src/entities/state_selectors.ts\nfunction createSelectorsFactory() {\n  function getSelectors(selectState) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _options$createSelect = options.createSelector,\n      createSelector2 = _options$createSelect === void 0 ? createDraftSafeSelector : _options$createSelect;\n    var selectIds = function selectIds(state) {\n      return state.ids;\n    };\n    var selectEntities = function selectEntities(state) {\n      return state.entities;\n    };\n    var selectAll = createSelector2(selectIds, selectEntities, function (ids, entities) {\n      return ids.map(function (id) {\n        return entities[id];\n      });\n    });\n    var selectId = function selectId(_, id) {\n      return id;\n    };\n    var selectById = function selectById(entities, id) {\n      return entities[id];\n    };\n    var selectTotal = createSelector2(selectIds, function (ids) {\n      return ids.length;\n    });\n    if (!selectState) {\n      return {\n        selectIds: selectIds,\n        selectEntities: selectEntities,\n        selectAll: selectAll,\n        selectTotal: selectTotal,\n        selectById: createSelector2(selectEntities, selectId, selectById)\n      };\n    }\n    var selectGlobalizedEntities = createSelector2(selectState, selectEntities);\n    return {\n      selectIds: createSelector2(selectState, selectIds),\n      selectEntities: selectGlobalizedEntities,\n      selectAll: createSelector2(selectState, selectAll),\n      selectTotal: createSelector2(selectState, selectTotal),\n      selectById: createSelector2(selectGlobalizedEntities, selectId, selectById)\n    };\n  }\n  return {\n    getSelectors: getSelectors\n  };\n}\n\n// src/entities/state_adapter.ts\n\nvar isDraftTyped = immer__WEBPACK_IMPORTED_MODULE_2__.isDraft;\nfunction createSingleArgumentStateOperator(mutator) {\n  var operator = createStateOperator(function (_, state) {\n    return mutator(state);\n  });\n  return function operation(state) {\n    return operator(state, void 0);\n  };\n}\nfunction createStateOperator(mutator) {\n  return function operation(state, arg) {\n    function isPayloadActionArgument(arg2) {\n      return isFSA(arg2);\n    }\n    var runMutator = function runMutator(draft) {\n      if (isPayloadActionArgument(arg)) {\n        mutator(arg.payload, draft);\n      } else {\n        mutator(arg, draft);\n      }\n    };\n    if (isDraftTyped(state)) {\n      runMutator(state);\n      return state;\n    }\n    return (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(state, runMutator);\n  };\n}\n\n// src/entities/utils.ts\n\nfunction selectIdValue(entity, selectId) {\n  var key = selectId(entity);\n  if ( true && key === void 0) {\n    console.warn(\"The entity passed to the `selectId` implementation returned undefined.\", \"You should probably provide your own `selectId` implementation.\", \"The entity that was passed:\", entity, \"The `selectId` implementation:\", selectId.toString());\n  }\n  return key;\n}\nfunction ensureEntitiesArray(entities) {\n  if (!Array.isArray(entities)) {\n    entities = Object.values(entities);\n  }\n  return entities;\n}\nfunction getCurrent(value) {\n  return (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(value) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.current)(value) : value;\n}\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\n  newEntities = ensureEntitiesArray(newEntities);\n  var existingIdsArray = getCurrent(state.ids);\n  var existingIds = new Set(existingIdsArray);\n  var added = [];\n  var updated = [];\n  var _iterator5 = _createForOfIteratorHelper(newEntities),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var entity = _step5.value;\n      var id = selectIdValue(entity, selectId);\n      if (existingIds.has(id)) {\n        updated.push({\n          id: id,\n          changes: entity\n        });\n      } else {\n        added.push(entity);\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return [added, updated, existingIdsArray];\n}\n\n// src/entities/unsorted_state_adapter.ts\nfunction createUnsortedStateAdapter(selectId) {\n  function addOneMutably(entity, state) {\n    var key = selectIdValue(entity, selectId);\n    if (key in state.entities) {\n      return;\n    }\n    state.ids.push(key);\n    state.entities[key] = entity;\n  }\n  function addManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    var _iterator6 = _createForOfIteratorHelper(newEntities),\n      _step6;\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var entity = _step6.value;\n        addOneMutably(entity, state);\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n  }\n  function setOneMutably(entity, state) {\n    var key = selectIdValue(entity, selectId);\n    if (!(key in state.entities)) {\n      state.ids.push(key);\n    }\n    ;\n    state.entities[key] = entity;\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    var _iterator7 = _createForOfIteratorHelper(newEntities),\n      _step7;\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var entity = _step7.value;\n        setOneMutably(entity, state);\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.ids = [];\n    state.entities = {};\n    addManyMutably(newEntities, state);\n  }\n  function removeOneMutably(key, state) {\n    return removeManyMutably([key], state);\n  }\n  function removeManyMutably(keys, state) {\n    var didMutate = false;\n    keys.forEach(function (key) {\n      if (key in state.entities) {\n        delete state.entities[key];\n        didMutate = true;\n      }\n    });\n    if (didMutate) {\n      state.ids = state.ids.filter(function (id) {\n        return id in state.entities;\n      });\n    }\n  }\n  function removeAllMutably(state) {\n    Object.assign(state, {\n      ids: [],\n      entities: {}\n    });\n  }\n  function takeNewKey(keys, update, state) {\n    var original3 = state.entities[update.id];\n    if (original3 === void 0) {\n      return false;\n    }\n    var updated = Object.assign({}, original3, update.changes);\n    var newKey = selectIdValue(updated, selectId);\n    var hasNewKey = newKey !== update.id;\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n    ;\n    state.entities[newKey] = updated;\n    return hasNewKey;\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    var newKeys = {};\n    var updatesPerEntity = {};\n    updates.forEach(function (update) {\n      if (update.id in state.entities) {\n        var _updatesPerEntity$upd;\n        updatesPerEntity[update.id] = {\n          id: update.id,\n          // Spreads ignore falsy values, so this works even if there isn't\n          // an existing update already at this key\n          changes: _objectSpread(_objectSpread({}, (_updatesPerEntity$upd = updatesPerEntity[update.id]) === null || _updatesPerEntity$upd === void 0 ? void 0 : _updatesPerEntity$upd.changes), update.changes)\n        };\n      }\n    });\n    updates = Object.values(updatesPerEntity);\n    var didMutateEntities = updates.length > 0;\n    if (didMutateEntities) {\n      var didMutateIds = updates.filter(function (update) {\n        return takeNewKey(newKeys, update, state);\n      }).length > 0;\n      if (didMutateIds) {\n        state.ids = Object.values(state.entities).map(function (e) {\n          return selectIdValue(e, selectId);\n        });\n      }\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    var _splitAddedUpdatedEnt = splitAddedUpdatedEntities(newEntities, selectId, state),\n      _splitAddedUpdatedEnt2 = _slicedToArray(_splitAddedUpdatedEnt, 2),\n      added = _splitAddedUpdatedEnt2[0],\n      updated = _splitAddedUpdatedEnt2[1];\n    updateManyMutably(updated, state);\n    addManyMutably(added, state);\n  }\n  return {\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably)\n  };\n}\n\n// src/entities/sorted_state_adapter.ts\nfunction findInsertIndex(sortedItems, item, comparisonFunction) {\n  var lowIndex = 0;\n  var highIndex = sortedItems.length;\n  while (lowIndex < highIndex) {\n    var middleIndex = lowIndex + highIndex >>> 1;\n    var currentItem = sortedItems[middleIndex];\n    var res = comparisonFunction(item, currentItem);\n    if (res >= 0) {\n      lowIndex = middleIndex + 1;\n    } else {\n      highIndex = middleIndex;\n    }\n  }\n  return lowIndex;\n}\nfunction insert(sortedItems, item, comparisonFunction) {\n  var insertAtIndex = findInsertIndex(sortedItems, item, comparisonFunction);\n  sortedItems.splice(insertAtIndex, 0, item);\n  return sortedItems;\n}\nfunction createSortedStateAdapter(selectId, comparer) {\n  var _createUnsortedStateA = createUnsortedStateAdapter(selectId),\n    removeOne = _createUnsortedStateA.removeOne,\n    removeMany = _createUnsortedStateA.removeMany,\n    removeAll = _createUnsortedStateA.removeAll;\n  function addOneMutably(entity, state) {\n    return addManyMutably([entity], state);\n  }\n  function addManyMutably(newEntities, state, existingIds) {\n    newEntities = ensureEntitiesArray(newEntities);\n    var existingKeys = new Set(existingIds !== null && existingIds !== void 0 ? existingIds : getCurrent(state.ids));\n    var models = newEntities.filter(function (model) {\n      return !existingKeys.has(selectIdValue(model, selectId));\n    });\n    if (models.length !== 0) {\n      mergeFunction(state, models);\n    }\n  }\n  function setOneMutably(entity, state) {\n    return setManyMutably([entity], state);\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    if (newEntities.length !== 0) {\n      var _iterator8 = _createForOfIteratorHelper(newEntities),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var item = _step8.value;\n          delete state.entities[selectId(item)];\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      mergeFunction(state, newEntities);\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.entities = {};\n    state.ids = [];\n    addManyMutably(newEntities, state, []);\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    var appliedUpdates = false;\n    var replacedIds = false;\n    var _iterator9 = _createForOfIteratorHelper(updates),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var update = _step9.value;\n        var entity = state.entities[update.id];\n        if (!entity) {\n          continue;\n        }\n        appliedUpdates = true;\n        Object.assign(entity, update.changes);\n        var newId = selectId(entity);\n        if (update.id !== newId) {\n          replacedIds = true;\n          delete state.entities[update.id];\n          var oldIndex = state.ids.indexOf(update.id);\n          state.ids[oldIndex] = newId;\n          state.entities[newId] = entity;\n        }\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n    if (appliedUpdates) {\n      mergeFunction(state, [], appliedUpdates, replacedIds);\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    var _splitAddedUpdatedEnt3 = splitAddedUpdatedEntities(newEntities, selectId, state),\n      _splitAddedUpdatedEnt4 = _slicedToArray(_splitAddedUpdatedEnt3, 3),\n      added = _splitAddedUpdatedEnt4[0],\n      updated = _splitAddedUpdatedEnt4[1],\n      existingIdsArray = _splitAddedUpdatedEnt4[2];\n    if (updated.length) {\n      updateManyMutably(updated, state);\n    }\n    if (added.length) {\n      addManyMutably(added, state, existingIdsArray);\n    }\n  }\n  function areArraysEqual(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] === b[i]) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n  var mergeFunction = function mergeFunction(state, addedItems, appliedUpdates, replacedIds) {\n    var currentEntities = getCurrent(state.entities);\n    var currentIds = getCurrent(state.ids);\n    var stateEntities = state.entities;\n    var ids = currentIds;\n    if (replacedIds) {\n      ids = new Set(currentIds);\n    }\n    var sortedEntities = [];\n    var _iterator10 = _createForOfIteratorHelper(ids),\n      _step10;\n    try {\n      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n        var id = _step10.value;\n        var entity = currentEntities[id];\n        if (entity) {\n          sortedEntities.push(entity);\n        }\n      }\n    } catch (err) {\n      _iterator10.e(err);\n    } finally {\n      _iterator10.f();\n    }\n    var wasPreviouslyEmpty = sortedEntities.length === 0;\n    var _iterator11 = _createForOfIteratorHelper(addedItems),\n      _step11;\n    try {\n      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n        var item = _step11.value;\n        stateEntities[selectId(item)] = item;\n        if (!wasPreviouslyEmpty) {\n          insert(sortedEntities, item, comparer);\n        }\n      }\n    } catch (err) {\n      _iterator11.e(err);\n    } finally {\n      _iterator11.f();\n    }\n    if (wasPreviouslyEmpty) {\n      sortedEntities = addedItems.slice().sort(comparer);\n    } else if (appliedUpdates) {\n      sortedEntities.sort(comparer);\n    }\n    var newSortedIds = sortedEntities.map(selectId);\n    if (!areArraysEqual(currentIds, newSortedIds)) {\n      state.ids = newSortedIds;\n    }\n  };\n  return {\n    removeOne: removeOne,\n    removeMany: removeMany,\n    removeAll: removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably)\n  };\n}\n\n// src/entities/create_adapter.ts\nfunction createEntityAdapter() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _sortComparer$selectI = _objectSpread({\n      sortComparer: false,\n      selectId: function selectId(instance) {\n        return instance.id;\n      }\n    }, options),\n    selectId = _sortComparer$selectI.selectId,\n    sortComparer = _sortComparer$selectI.sortComparer;\n  var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n  var stateFactory = createInitialStateFactory(stateAdapter);\n  var selectorsFactory = createSelectorsFactory();\n  return _objectSpread(_objectSpread(_objectSpread({\n    selectId: selectId,\n    sortComparer: sortComparer\n  }, stateFactory), selectorsFactory), stateAdapter);\n}\n\n// src/listenerMiddleware/index.ts\n\n\n// src/listenerMiddleware/exceptions.ts\nvar task = \"task\";\nvar listener = \"listener\";\nvar completed = \"completed\";\nvar cancelled = \"cancelled\";\nvar taskCancelled = \"task-\".concat(cancelled);\nvar taskCompleted = \"task-\".concat(completed);\nvar listenerCancelled = \"\".concat(listener, \"-\").concat(cancelled);\nvar listenerCompleted = \"\".concat(listener, \"-\").concat(completed);\nvar TaskAbortError = /*#__PURE__*/_createClass(function TaskAbortError(code) {\n  _classCallCheck(this, TaskAbortError);\n  this.name = \"TaskAbortError\";\n  this.message = void 0;\n  this.code = code;\n  this.message = \"\".concat(task, \" \").concat(cancelled, \" (reason: \").concat(code, \")\");\n});\n\n// src/listenerMiddleware/utils.ts\nvar assertFunction = function assertFunction(func, expected) {\n  if (typeof func !== \"function\") {\n    throw new Error( false ? 0 : \"\".concat(expected, \" is not a function\"));\n  }\n};\nvar noop2 = function noop2() {};\nvar catchRejection = function catchRejection(promise) {\n  var onError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop2;\n  promise[\"catch\"](onError);\n  return promise;\n};\nvar addAbortSignalListener = function addAbortSignalListener(abortSignal, callback) {\n  abortSignal.addEventListener(\"abort\", callback, {\n    once: true\n  });\n  return function () {\n    return abortSignal.removeEventListener(\"abort\", callback);\n  };\n};\nvar abortControllerWithReason = function abortControllerWithReason(abortController, reason) {\n  var signal = abortController.signal;\n  if (signal.aborted) {\n    return;\n  }\n  if (!(\"reason\" in signal)) {\n    Object.defineProperty(signal, \"reason\", {\n      enumerable: true,\n      value: reason,\n      configurable: true,\n      writable: true\n    });\n  }\n  ;\n  abortController.abort(reason);\n};\n\n// src/listenerMiddleware/task.ts\nvar validateActive = function validateActive(signal) {\n  if (signal.aborted) {\n    var reason = signal.reason;\n    throw new TaskAbortError(reason);\n  }\n};\nfunction raceWithSignal(signal, promise) {\n  var cleanup = noop2;\n  return new Promise(function (resolve, reject) {\n    var notifyRejection = function notifyRejection() {\n      return reject(new TaskAbortError(signal.reason));\n    };\n    if (signal.aborted) {\n      notifyRejection();\n      return;\n    }\n    cleanup = addAbortSignalListener(signal, notifyRejection);\n    promise[\"finally\"](function () {\n      return cleanup();\n    }).then(resolve, reject);\n  })[\"finally\"](function () {\n    cleanup = noop2;\n  });\n}\nvar runTask = /*#__PURE__*/function () {\n  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(task2, cleanUp) {\n    var value;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return Promise.resolve();\n        case 3:\n          _context2.next = 5;\n          return task2();\n        case 5:\n          value = _context2.sent;\n          return _context2.abrupt(\"return\", {\n            status: \"ok\",\n            value: value\n          });\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", {\n            status: _context2.t0 instanceof TaskAbortError ? \"cancelled\" : \"rejected\",\n            error: _context2.t0\n          });\n        case 12:\n          _context2.prev = 12;\n          cleanUp === null || cleanUp === void 0 || cleanUp();\n          return _context2.finish(12);\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[0, 9, 12, 15]]);\n  }));\n  return function runTask(_x, _x2) {\n    return _ref14.apply(this, arguments);\n  };\n}();\nvar createPause = function createPause(signal) {\n  return function (promise) {\n    return catchRejection(raceWithSignal(signal, promise).then(function (output) {\n      validateActive(signal);\n      return output;\n    }));\n  };\n};\nvar createDelay = function createDelay(signal) {\n  var pause = createPause(signal);\n  return function (timeoutMs) {\n    return pause(new Promise(function (resolve) {\n      return setTimeout(resolve, timeoutMs);\n    }));\n  };\n};\n\n// src/listenerMiddleware/index.ts\nvar assign = Object.assign;\nvar INTERNAL_NIL_TOKEN = {};\nvar alm = \"listenerMiddleware\";\nvar createFork = function createFork(parentAbortSignal, parentBlockingPromises) {\n  var linkControllers = function linkControllers(controller) {\n    return addAbortSignalListener(parentAbortSignal, function () {\n      return abortControllerWithReason(controller, parentAbortSignal.reason);\n    });\n  };\n  return function (taskExecutor, opts) {\n    assertFunction(taskExecutor, \"taskExecutor\");\n    var childAbortController = new AbortController();\n    linkControllers(childAbortController);\n    var result = runTask( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var result2;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            validateActive(parentAbortSignal);\n            validateActive(childAbortController.signal);\n            _context3.next = 4;\n            return taskExecutor({\n              pause: createPause(childAbortController.signal),\n              delay: createDelay(childAbortController.signal),\n              signal: childAbortController.signal\n            });\n          case 4:\n            result2 = _context3.sent;\n            validateActive(childAbortController.signal);\n            return _context3.abrupt(\"return\", result2);\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    })), function () {\n      return abortControllerWithReason(childAbortController, taskCompleted);\n    });\n    if (opts !== null && opts !== void 0 && opts.autoJoin) {\n      parentBlockingPromises.push(result[\"catch\"](noop2));\n    }\n    return {\n      result: createPause(parentAbortSignal)(result),\n      cancel: function cancel() {\n        abortControllerWithReason(childAbortController, taskCancelled);\n      }\n    };\n  };\n};\nvar createTakePattern = function createTakePattern(startListening, signal) {\n  var take = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(predicate, timeout) {\n      var unsubscribe, tuplePromise, promises, output;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            validateActive(signal);\n            unsubscribe = function unsubscribe() {};\n            tuplePromise = new Promise(function (resolve, reject) {\n              var stopListening = startListening({\n                predicate: predicate,\n                effect: function effect(action, listenerApi) {\n                  listenerApi.unsubscribe();\n                  resolve([action, listenerApi.getState(), listenerApi.getOriginalState()]);\n                }\n              });\n              unsubscribe = function unsubscribe() {\n                stopListening();\n                reject();\n              };\n            });\n            promises = [tuplePromise];\n            if (timeout != null) {\n              promises.push(new Promise(function (resolve) {\n                return setTimeout(resolve, timeout, null);\n              }));\n            }\n            _context4.prev = 5;\n            _context4.next = 8;\n            return raceWithSignal(signal, Promise.race(promises));\n          case 8:\n            output = _context4.sent;\n            validateActive(signal);\n            return _context4.abrupt(\"return\", output);\n          case 11:\n            _context4.prev = 11;\n            unsubscribe();\n            return _context4.finish(11);\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[5,, 11, 14]]);\n    }));\n    return function take(_x3, _x4) {\n      return _ref15.apply(this, arguments);\n    };\n  }();\n  return function (predicate, timeout) {\n    return catchRejection(take(predicate, timeout));\n  };\n};\nvar getListenerEntryPropsFrom = function getListenerEntryPropsFrom(options) {\n  var type = options.type,\n    actionCreator = options.actionCreator,\n    matcher = options.matcher,\n    predicate = options.predicate,\n    effect = options.effect;\n  if (type) {\n    predicate = createAction(type).match;\n  } else if (actionCreator) {\n    type = actionCreator.type;\n    predicate = actionCreator.match;\n  } else if (matcher) {\n    predicate = matcher;\n  } else if (predicate) {} else {\n    throw new Error( false ? 0 : \"Creating or removing a listener requires one of the known fields for matching an action\");\n  }\n  assertFunction(effect, \"options.listener\");\n  return {\n    predicate: predicate,\n    type: type,\n    effect: effect\n  };\n};\nvar createListenerEntry = Object.assign(function (options) {\n  var _getListenerEntryProp = getListenerEntryPropsFrom(options),\n    type = _getListenerEntryProp.type,\n    predicate = _getListenerEntryProp.predicate,\n    effect = _getListenerEntryProp.effect;\n  var id = nanoid();\n  var entry = {\n    id: id,\n    effect: effect,\n    type: type,\n    predicate: predicate,\n    pending: /* @__PURE__ */new Set(),\n    unsubscribe: function unsubscribe() {\n      throw new Error( false ? 0 : \"Unsubscribe not initialized\");\n    }\n  };\n  return entry;\n}, {\n  withTypes: function withTypes() {\n    return createListenerEntry;\n  }\n});\nvar cancelActiveListeners = function cancelActiveListeners(entry) {\n  entry.pending.forEach(function (controller) {\n    abortControllerWithReason(controller, listenerCancelled);\n  });\n};\nvar createClearListenerMiddleware = function createClearListenerMiddleware(listenerMap) {\n  return function () {\n    listenerMap.forEach(cancelActiveListeners);\n    listenerMap.clear();\n  };\n};\nvar safelyNotifyError = function safelyNotifyError(errorHandler, errorToNotify, errorInfo) {\n  try {\n    errorHandler(errorToNotify, errorInfo);\n  } catch (errorHandlerError) {\n    setTimeout(function () {\n      throw errorHandlerError;\n    }, 0);\n  }\n};\nvar addListener = Object.assign(createAction(\"\".concat(alm, \"/add\")), {\n  withTypes: function withTypes() {\n    return addListener;\n  }\n});\nvar clearAllListeners = createAction(\"\".concat(alm, \"/removeAll\"));\nvar removeListener = Object.assign(createAction(\"\".concat(alm, \"/remove\")), {\n  withTypes: function withTypes() {\n    return removeListener;\n  }\n});\nvar defaultErrorHandler = function defaultErrorHandler() {\n  var _console;\n  for (var _len13 = arguments.length, args = new Array(_len13), _key15 = 0; _key15 < _len13; _key15++) {\n    args[_key15] = arguments[_key15];\n  }\n  (_console = console).error.apply(_console, [\"\".concat(alm, \"/error\")].concat(args));\n};\nvar createListenerMiddleware = function createListenerMiddleware() {\n  var middlewareOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var listenerMap = /* @__PURE__ */new Map();\n  var extra = middlewareOptions.extra,\n    _middlewareOptions$on = middlewareOptions.onError,\n    onError = _middlewareOptions$on === void 0 ? defaultErrorHandler : _middlewareOptions$on;\n  assertFunction(onError, \"onError\");\n  var insertEntry = function insertEntry(entry) {\n    entry.unsubscribe = function () {\n      return listenerMap[\"delete\"](entry.id);\n    };\n    listenerMap.set(entry.id, entry);\n    return function (cancelOptions) {\n      entry.unsubscribe();\n      if (cancelOptions !== null && cancelOptions !== void 0 && cancelOptions.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    };\n  };\n  var startListening = function startListening(options) {\n    var entry = find(Array.from(listenerMap.values()), function (existingEntry) {\n      return existingEntry.effect === options.effect;\n    });\n    if (!entry) {\n      entry = createListenerEntry(options);\n    }\n    return insertEntry(entry);\n  };\n  Object.assign(startListening, {\n    withTypes: function withTypes() {\n      return startListening;\n    }\n  });\n  var stopListening = function stopListening(options) {\n    var _getListenerEntryProp2 = getListenerEntryPropsFrom(options),\n      type = _getListenerEntryProp2.type,\n      effect = _getListenerEntryProp2.effect,\n      predicate = _getListenerEntryProp2.predicate;\n    var entry = find(Array.from(listenerMap.values()), function (entry2) {\n      var matchPredicateOrType = typeof type === \"string\" ? entry2.type === type : entry2.predicate === predicate;\n      return matchPredicateOrType && entry2.effect === effect;\n    });\n    if (entry) {\n      entry.unsubscribe();\n      if (options.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    }\n    return !!entry;\n  };\n  Object.assign(stopListening, {\n    withTypes: function withTypes() {\n      return stopListening;\n    }\n  });\n  var notifyListener = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(entry, action, api, getOriginalState) {\n      var internalTaskController, take, autoJoinPromises;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            internalTaskController = new AbortController();\n            take = createTakePattern(startListening, internalTaskController.signal);\n            autoJoinPromises = [];\n            _context5.prev = 3;\n            entry.pending.add(internalTaskController);\n            _context5.next = 7;\n            return Promise.resolve(entry.effect(action,\n            // Use assign() rather than ... to avoid extra helper functions added to bundle\n            assign({}, api, {\n              getOriginalState: getOriginalState,\n              condition: function condition(predicate, timeout) {\n                return take(predicate, timeout).then(Boolean);\n              },\n              take: take,\n              delay: createDelay(internalTaskController.signal),\n              pause: createPause(internalTaskController.signal),\n              extra: extra,\n              signal: internalTaskController.signal,\n              fork: createFork(internalTaskController.signal, autoJoinPromises),\n              unsubscribe: entry.unsubscribe,\n              subscribe: function subscribe() {\n                listenerMap.set(entry.id, entry);\n              },\n              cancelActiveListeners: function cancelActiveListeners() {\n                entry.pending.forEach(function (controller, _, set) {\n                  if (controller !== internalTaskController) {\n                    abortControllerWithReason(controller, listenerCancelled);\n                    set[\"delete\"](controller);\n                  }\n                });\n              },\n              cancel: function cancel() {\n                abortControllerWithReason(internalTaskController, listenerCancelled);\n                entry.pending[\"delete\"](internalTaskController);\n              },\n              throwIfCancelled: function throwIfCancelled() {\n                validateActive(internalTaskController.signal);\n              }\n            })));\n          case 7:\n            _context5.next = 12;\n            break;\n          case 9:\n            _context5.prev = 9;\n            _context5.t0 = _context5[\"catch\"](3);\n            if (!(_context5.t0 instanceof TaskAbortError)) {\n              safelyNotifyError(onError, _context5.t0, {\n                raisedBy: \"effect\"\n              });\n            }\n          case 12:\n            _context5.prev = 12;\n            _context5.next = 15;\n            return Promise.all(autoJoinPromises);\n          case 15:\n            abortControllerWithReason(internalTaskController, listenerCompleted);\n            entry.pending[\"delete\"](internalTaskController);\n            return _context5.finish(12);\n          case 18:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5, null, [[3, 9, 12, 18]]);\n    }));\n    return function notifyListener(_x5, _x6, _x7, _x8) {\n      return _ref16.apply(this, arguments);\n    };\n  }();\n  var clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\n  var middleware = function middleware(api) {\n    return function (next) {\n      return function (action) {\n        if (!(0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\n          return next(action);\n        }\n        if (addListener.match(action)) {\n          return startListening(action.payload);\n        }\n        if (clearAllListeners.match(action)) {\n          clearListenerMiddleware();\n          return;\n        }\n        if (removeListener.match(action)) {\n          return stopListening(action.payload);\n        }\n        var originalState = api.getState();\n        var getOriginalState = function getOriginalState() {\n          if (originalState === INTERNAL_NIL_TOKEN) {\n            throw new Error( false ? 0 : \"\".concat(alm, \": getOriginalState can only be called synchronously\"));\n          }\n          return originalState;\n        };\n        var result;\n        try {\n          result = next(action);\n          if (listenerMap.size > 0) {\n            var currentState = api.getState();\n            var listenerEntries = Array.from(listenerMap.values());\n            for (var _i4 = 0, _listenerEntries = listenerEntries; _i4 < _listenerEntries.length; _i4++) {\n              var entry = _listenerEntries[_i4];\n              var runListener = false;\n              try {\n                runListener = entry.predicate(action, currentState, originalState);\n              } catch (predicateError) {\n                runListener = false;\n                safelyNotifyError(onError, predicateError, {\n                  raisedBy: \"predicate\"\n                });\n              }\n              if (!runListener) {\n                continue;\n              }\n              notifyListener(entry, action, api, getOriginalState);\n            }\n          }\n        } finally {\n          originalState = INTERNAL_NIL_TOKEN;\n        }\n        return result;\n      };\n    };\n  };\n  return {\n    middleware: middleware,\n    startListening: startListening,\n    stopListening: stopListening,\n    clearListeners: clearListenerMiddleware\n  };\n};\n\n// src/dynamicMiddleware/index.ts\n\nvar createMiddlewareEntry = function createMiddlewareEntry(middleware) {\n  return {\n    id: nanoid(),\n    middleware: middleware,\n    applied: /* @__PURE__ */new Map()\n  };\n};\nvar matchInstance = function matchInstance(instanceId) {\n  return function (action) {\n    var _action$meta2;\n    return (action === null || action === void 0 || (_action$meta2 = action.meta) === null || _action$meta2 === void 0 ? void 0 : _action$meta2.instanceId) === instanceId;\n  };\n};\nvar createDynamicMiddleware = function createDynamicMiddleware() {\n  var instanceId = nanoid();\n  var middlewareMap = /* @__PURE__ */new Map();\n  var withMiddleware = Object.assign(createAction(\"dynamicMiddleware/add\", function () {\n    for (var _len14 = arguments.length, middlewares = new Array(_len14), _key16 = 0; _key16 < _len14; _key16++) {\n      middlewares[_key16] = arguments[_key16];\n    }\n    return {\n      payload: middlewares,\n      meta: {\n        instanceId: instanceId\n      }\n    };\n  }), {\n    withTypes: function withTypes() {\n      return withMiddleware;\n    }\n  });\n  var addMiddleware = Object.assign(function addMiddleware2() {\n    for (var _len15 = arguments.length, middlewares = new Array(_len15), _key17 = 0; _key17 < _len15; _key17++) {\n      middlewares[_key17] = arguments[_key17];\n    }\n    middlewares.forEach(function (middleware2) {\n      var entry = find(Array.from(middlewareMap.values()), function (entry2) {\n        return entry2.middleware === middleware2;\n      });\n      if (!entry) {\n        entry = createMiddlewareEntry(middleware2);\n      }\n      middlewareMap.set(entry.id, entry);\n    });\n  }, {\n    withTypes: function withTypes() {\n      return addMiddleware;\n    }\n  });\n  var getFinalMiddleware = function getFinalMiddleware(api) {\n    var appliedMiddleware = Array.from(middlewareMap.values()).map(function (entry) {\n      return emplace(entry.applied, api, {\n        insert: function insert() {\n          return entry.middleware(api);\n        }\n      });\n    });\n    return redux__WEBPACK_IMPORTED_MODULE_0__.compose.apply(void 0, _toConsumableArray(appliedMiddleware));\n  };\n  var isWithMiddleware = isAllOf(withMiddleware, matchInstance(instanceId));\n  var middleware = function middleware(api) {\n    return function (next) {\n      return function (action) {\n        if (isWithMiddleware(action)) {\n          addMiddleware.apply(void 0, _toConsumableArray(action.payload));\n          return api.dispatch;\n        }\n        return getFinalMiddleware(api)(next)(action);\n      };\n    };\n  };\n  return {\n    middleware: middleware,\n    addMiddleware: addMiddleware,\n    withMiddleware: withMiddleware,\n    instanceId: instanceId\n  };\n};\n\n// src/combineSlices.ts\n\nvar isSliceLike = function isSliceLike(maybeSliceLike) {\n  return \"reducerPath\" in maybeSliceLike && typeof maybeSliceLike.reducerPath === \"string\";\n};\nvar getReducers = function getReducers(slices) {\n  return slices.flatMap(function (sliceOrMap) {\n    return isSliceLike(sliceOrMap) ? [[sliceOrMap.reducerPath, sliceOrMap.reducer]] : Object.entries(sliceOrMap);\n  });\n};\nvar ORIGINAL_STATE = Symbol[\"for\"](\"rtk-state-proxy-original\");\nvar isStateProxy = function isStateProxy(value) {\n  return !!value && !!value[ORIGINAL_STATE];\n};\nvar stateProxyMap = /* @__PURE__ */new WeakMap();\nvar createStateProxy = function createStateProxy(state, reducerMap) {\n  return emplace(stateProxyMap, state, {\n    insert: function insert() {\n      return new Proxy(state, {\n        get: function get(target, prop, receiver) {\n          if (prop === ORIGINAL_STATE) return target;\n          var result = Reflect.get(target, prop, receiver);\n          if (typeof result === \"undefined\") {\n            var reducer = reducerMap[prop.toString()];\n            if (reducer) {\n              var reducerResult = reducer(void 0, {\n                type: nanoid()\n              });\n              if (typeof reducerResult === \"undefined\") {\n                throw new Error( false ? 0 : \"The slice reducer for key \\\"\".concat(prop.toString(), \"\\\" returned undefined when called for selector(). If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.\"));\n              }\n              return reducerResult;\n            }\n          }\n          return result;\n        }\n      });\n    }\n  });\n};\nvar original = function original(state) {\n  if (!isStateProxy(state)) {\n    throw new Error( false ? 0 : \"original must be used on state Proxy\");\n  }\n  return state[ORIGINAL_STATE];\n};\nvar noopReducer = function noopReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return state;\n};\nfunction combineSlices() {\n  for (var _len16 = arguments.length, slices = new Array(_len16), _key18 = 0; _key18 < _len16; _key18++) {\n    slices[_key18] = arguments[_key18];\n  }\n  var reducerMap = Object.fromEntries(getReducers(slices));\n  var getReducer = function getReducer() {\n    return Object.keys(reducerMap).length ? (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducerMap) : noopReducer;\n  };\n  var reducer = getReducer();\n  function combinedReducer(state, action) {\n    return reducer(state, action);\n  }\n  combinedReducer.withLazyLoadedSlices = function () {\n    return combinedReducer;\n  };\n  var inject = function inject(slice) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var reducerPath = slice.reducerPath,\n      reducerToInject = slice.reducer;\n    var currentReducer = reducerMap[reducerPath];\n    if (!config.overrideExisting && currentReducer && currentReducer !== reducerToInject) {\n      if (typeof process !== \"undefined\" && true) {\n        console.error(\"called `inject` to override already-existing reducer \".concat(reducerPath, \" without specifying `overrideExisting: true`\"));\n      }\n      return combinedReducer;\n    }\n    reducerMap[reducerPath] = reducerToInject;\n    reducer = getReducer();\n    return combinedReducer;\n  };\n  var selector = Object.assign(function makeSelector(selectorFn, selectState) {\n    return function selector2(state) {\n      for (var _len17 = arguments.length, args = new Array(_len17 > 1 ? _len17 - 1 : 0), _key19 = 1; _key19 < _len17; _key19++) {\n        args[_key19 - 1] = arguments[_key19];\n      }\n      return selectorFn.apply(void 0, [createStateProxy(selectState ? selectState.apply(void 0, [state].concat(args)) : state, reducerMap)].concat(args));\n    };\n  }, {\n    original: original\n  });\n  return Object.assign(combinedReducer, {\n    inject: inject,\n    selector: selector\n  });\n}\n\n// src/formatProdErrorMessage.ts\nfunction formatProdErrorMessage(code) {\n  return \"Minified Redux Toolkit error #\".concat(code, \"; visit https://redux-toolkit.js.org/Errors?code=\").concat(code, \" for the full message or use the non-minified dev environment for full errors. \");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\n");

/***/ })

};
;